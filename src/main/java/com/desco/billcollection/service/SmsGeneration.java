package com.desco.billcollection.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.desco.billcollection.model.SmsModel;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
@Service
public class SmsGeneration {
	@Value("${sms.user.name}")
	String userName;
	@Value("${sms.user.password}")
	String userPassword;
	private final static Logger logger = Logger.getLogger("");
	public Queue<Integer> smsIDQueue = new ArrayBlockingQueue<Integer>(100);

	@Async
	public CompletableFuture<String> smsGenerator(List<SmsModel> sms) {
		String mobileNoList = "";
		String smsTextList = "";
		String cId = "";
		String jsonBody = "";		
		String firstId = Integer.toString(sms.get(0).getId());
		int numberOfSms = sms.size();
		smsIDQueue.clear();

		Long currentTime = System.currentTimeMillis();
		KeyGeneration keyGen = new KeyGeneration();

		for (int i = 0; i < numberOfSms; i++) {
			if (i == 0) {
				mobileNoList += sms.get(i).getMobileNo();
				smsTextList += sms.get(i).getSmsTexT();

			} else {
				mobileNoList += "|" + sms.get(i).getMobileNo();
				smsTextList += "|" + sms.get(i).getSmsTexT();
			}
			smsIDQueue.add(sms.get(i).getId());
		}
		String lastId = Integer.toString(sms.get(numberOfSms - 1).getId());
		cId += firstId + lastId;

		SMSRequestFormatter postBody = new SMSRequestFormatter();

		postBody.setOp("SMS");
		postBody.setUser(userName);
		postBody.setPass(userPassword);
		postBody.setChunk("V");
		postBody.setCid(cId);
		postBody.setServername("bulksms1.teletalk.com.bd");
		postBody.setSmsclass("GENERAL");
		postBody.setValidity("720");
		postBody.setMobile(mobileNoList);
		postBody.setSms(smsTextList);
		postBody.setCharset("ASCII", numberOfSms);

		postBody.setP_key(keyGen.getPKey(currentTime));
		postBody.setA_key(keyGen.getAKey(currentTime));

		ObjectMapper objectMapper = new ObjectMapper();
		try {
			jsonBody = objectMapper.writeValueAsString(postBody);
			logger.info("SMS JSON is generated by " + Thread.currentThread().getName() + " at " + LocalDateTime.now());
		} catch (JsonProcessingException e) {
			logger.warning("Exception While converting sms Object to JSON : " + Thread.currentThread().getName() + e.getMessage());
		}		
		return CompletableFuture.completedFuture(jsonBody);
	}
}